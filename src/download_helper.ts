import Logger from "./logger";

import { downloadFile, dateString } from "./utilities";

export default class DownloadHelper {
  constructor() {
    this.log = new Logger();

    this.mutationCallback = DownloadHelper.callback.bind(this); // necessary for class callback
    this.observer = new MutationObserver(this.mutationCallback);

    // re-import
    DownloadHelper.dateString = dateString;
    DownloadHelper.downloadFile = downloadFile;

    this.linksReady;
    this.button;
  }

  init() {
    this.log.info("Initiating BES Download Helper");

    this.createButton();

    this.mutationCallback();

    const config = { attributes: true, attributeFilter: ["href"] }; // observe if download links change
    const targetNodes = document.querySelectorAll(
      ".download-title .item-button"
    );

    for (let node of targetNodes) {
      this.observer.observe(node, config);
    }
  }

  createButton() {
    if (this.button) return;

    let location = document.querySelector("div.download-titles");

    this.button = document.createElement("button");
    this.button.title =
      "Generates a file for automating downloads using 'cURL'";
    this.button.className = "bes-downloadall";
    this.button.disabled = true;
    this.button.textContent = "preparing download";

    location.append(this.button);
  }

  enableButton() {
    this.log.info("enableButton()");

    this.button.disabled = false;
    this.button.textContent = "Download cURL File";

    this.button.addEventListener("click", function() {
      const date = DownloadHelper.dateString();
      const downloadList = DownloadHelper.generateDownloadList();
      const preamble = DownloadHelper.getDownloadPreamble();
      const postamble = DownloadHelper.getDownloadPostamble();
      const downloadDocument = preamble + downloadList + postamble;

      DownloadHelper.downloadFile(`bandcamp_${date}.txt`, downloadDocument);
    });
  }

  disableButton() {
    this.log.info("disableButton()");

    this.button.disabled = true;
    this.button.removeEventListener("click", function() {});
    this.button.textContent = "preparing download";
  }

  static generateDownloadList() {
    const urlSet = new Set(
      [...document.querySelectorAll("a.item-button")].map(item => {
        return item.getAttribute("href");
      })
    );

    if (urlSet.size === 0) return "URLS=()\n";

    const fileList = [...urlSet].map(url => `\t"${url}"`).join("\n");
    return "URLS=(\n" + fileList + "\n)\n";
  }

  static callback() {
    const allDownloadLinks = document.querySelectorAll(
      ".download-title .item-button"
    );

    const linksReady = [...allDownloadLinks].every(
      element => element.style.display !== "none"
    );

    this.log.info(`linksReady: ${linksReady}`);
    if (linksReady) {
      this.enableButton();
      return;
    }

    this.disableButton();
  }

  static getDownloadPreamble() {
    return preamble;
  }

  static getDownloadPostamble() {
    return postamble;
  }
}

const preamble = `#!/usr/bin/env bash

# Generated by Bandcamp Enhancement Suite (https://github.com/sabjorn/BandcampEnhancementSuite)
#
# The following can be used to batch download your recent purchases.
# NOTE: pasting into terminal may not work properly--please follow new instructions below
#
# Usage (Mac/Linux):
# 1) open Terminal
# 2) move to desired download directory (e.g. \`cd ~/Downloads/bandcamp\`)
# 3) run script (e.g. \`bash <this filename>.txt\`

`;

const postamble = `
DEFAULT_BATCH_SIZE=5

download_file() {
    local url="$1"
    
    if curl -L --fail -OJ "$url" 2>/dev/null; then
        echo -n "."
        return 0
    else
        echo -n "x"
        return 1
    fi
}

TOTAL_URLS=\${#URLS[@]}
COMPLETED=0
FAILED=0
BATCH_SIZE=\${1:-$DEFAULT_BATCH_SIZE}
if [ "$BATCH_SIZE" -eq "$DEFAULT_BATCH_SIZE" ] && [ -z "$1" ]; then
    echo "note: the BATCH_SIZE can be set with a numerical argument after the command. e.g. bash this_script.txt 10"
fi

echo "Beginning parallel download of $TOTAL_URLS files (batch size: $BATCH_SIZE)"
for ((i=0; i<TOTAL_URLS; i+=BATCH_SIZE)); do
    pids=()
    for ((j=i; j<i+BATCH_SIZE && j<TOTAL_URLS; j++)); do
        download_file "\${URLS[j]}" &
        pids+=($!)
    done
    
    for pid in "\${pids[@]}"; do
        wait $pid
        status=$?
        if [ $status -eq 0 ]; then
            ((COMPLETED++))
        else
            ((FAILED++))
        fi
    done
done

echo ""
if [ $FAILED -eq 0 ]; then
    echo "Successfully downloaded $TOTAL_URLS files"
else
    echo "$FAILED files failed to download"
fi
echo ""
echo "Press any key to exit..."
read -n 1

exit $FAILED
`;
